import { AudioData, BaseApp, HandleRequest, Host, Jovo, SpeechBuilder } from 'jovo-core';
import { ConversationalSession, Reprompt, PermissionResult, Prompt } from './Interfaces';
import { ConversationalActionUser } from './ConversationalActionUser';
import { GoogleActionSpeechBuilder } from './GoogleActionSpeechBuilder';
import { ConversationalScene } from './ConversationalScene';
export declare class GoogleAction extends Jovo {
    $user: ConversationalActionUser;
    $conversationalSession: ConversationalSession;
    $scene?: ConversationalScene;
    constructor(app: BaseApp, host: Host, handleRequest?: HandleRequest);
    getLocale(): string;
    getTimestamp(): string;
    speechBuilder(): GoogleActionSpeechBuilder;
    getSpeechBuilder(): GoogleActionSpeechBuilder;
    isNewSession(): boolean;
    ask(speech: string | SpeechBuilder | string[], reprompt: string | SpeechBuilder | string[], ...reprompts: Reprompt[]): this;
    hasWebBrowserInterface(): boolean;
    hasScreenInterface(): boolean;
    hasAudioInterface(): boolean;
    hasLongFormAudioInterface(): boolean | undefined;
    setNextScene(scene: string): this;
    endConversation(): this;
    endSession(): this;
    hasInteractiveCanvasInterface(): boolean | undefined;
    getAvailableSurfaces(): void;
    hasVideoInterface(): boolean;
    getDeviceId(): undefined;
    getType(): string;
    getPlatformType(): string;
    getRawText(): string | undefined;
    getAudioData(): AudioData | undefined;
    isInSandbox(): void;
    isVerifiedUser(): boolean;
    getSelectedElementId(): string | undefined;
    getProjectId(): string;
    hasMediaResponseInterface(): boolean;
    showSuggestions(suggestions: string[]): void;
    isAccountLinkingRejected(): boolean;
    isAccountLinkingLinked(): boolean;
    getPermissionResult(): PermissionResult | undefined;
    getPermissionStatus(): "PERMISSION_DENIED" | "PERMISSION_GRANTED" | "ALREADY_GRANTED" | undefined;
    isPermissionDenied(): boolean;
    isPermissionGranted(): boolean;
    isPermissionAlreadyGranted(): boolean;
    getNotificationsUserId(): string | undefined;
    prompt(prompt: Prompt): this;
    showAccountLinkingCard(): this;
    promptAsk(prompt: Prompt, ...reprompts: Prompt[]): this;
    addSessionEntityTypes(sessionEntityTypes: any): void;
    addSessionEntityType(sessionEntityType: any): void;
    addSessionEntity(sessionEntity: any): void;
    setExpected(expectedSpeech: string[], languageCode?: string): void;
}
